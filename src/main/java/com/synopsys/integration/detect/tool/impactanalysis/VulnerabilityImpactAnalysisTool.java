package com.synopsys.integration.detect.tool.impactanalysis;

import java.io.IOException;
import java.nio.file.Path;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.synopsys.integration.detect.tool.impactanalysis.service.ImpactAnalysisService;
import com.synopsys.integration.detect.tool.impactanalysis.service.ImpactAnalysisUploadResult;
import com.synopsys.integration.detect.workflow.codelocation.CodeLocationNameManager;
import com.synopsys.integration.detect.workflow.file.DirectoryManager;
import com.synopsys.integration.exception.IntegrationException;
import com.synopsys.integration.rest.exception.IntegrationRestException;
import com.synopsys.integration.util.NameVersion;
import com.synopsys.method.analyzer.core.MethodUseAnalyzer;

public class VulnerabilityImpactAnalysisTool {
    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    private final DirectoryManager directoryManager;
    private final CodeLocationNameManager codeLocationNameManager;

    public VulnerabilityImpactAnalysisTool(DirectoryManager directoryManager, CodeLocationNameManager codeLocationNameManager) {
        this.directoryManager = directoryManager;
        this.codeLocationNameManager = codeLocationNameManager;
    }

    public Path generateReport(NameVersion projectNameVersion) throws IOException {
        MethodUseAnalyzer analyzer = new MethodUseAnalyzer();
        String impactAnalysisCodeLocationName = codeLocationNameManager.createImpactAnalysisCodeLocationName(directoryManager.getSourceDirectory(), projectNameVersion.getName(), projectNameVersion.getVersion(), null, null);

        Path outputReportPath = analyzer.analyze(directoryManager.getSourceDirectory().toPath(), directoryManager.getBinaryOutputDirectory().toPath(), impactAnalysisCodeLocationName);
        logger.info(String.format("Vulnerability Impact Analysis generated report at %s", outputReportPath));

        return outputReportPath;
    }

    public ImpactAnalysisUploadResult uploadReport(Path reportPath, ImpactAnalysisService impactAnalysisService) throws IntegrationException {
        try {
            logger.debug("Uploading report.");
            ImpactAnalysisUploadResult impactAnalysisUploadResult = impactAnalysisService.uploadImpactAnalysisReport(reportPath);
            logger.debug("Report upload completed.");

            return impactAnalysisUploadResult;
        } catch (IntegrationRestException integrationRestException) {

            if (integrationRestException.getHttpStatusCode() == 404) {
                throw new IntegrationException("Report upload failed with 404. Your version of Black Duck may not support Vulnerability Impact Analysis.", integrationRestException);
            } else {
                throw new IntegrationException(String.format("Report upload failed with status code %d: %s", integrationRestException.getHttpStatusCode(), integrationRestException.getHttpResponseContent()), integrationRestException);
            }
        } catch (IOException | IntegrationException exception) {
            throw new IntegrationException(String.format("Report upload failed. %s", exception.getMessage()), exception);
        }
    }
}
