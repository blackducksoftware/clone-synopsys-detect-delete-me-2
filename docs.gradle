import com.synopsys.integration.detect.docs.GenerateDocsTask

import java.awt.*

task helpJson(type: JavaExec) {
    dependsOn build

    classpath = files(createArtifactName())
    classpath += sourceSets.main.runtimeClasspath
    main = 'com.synopsys.integration.detect.Application'
    args = ['--helpjson']
}

task generateDocs(type: GenerateDocsTask) {
    dependsOn helpJson
}

String findDita() {
    return System.getProperty("os.name").toLowerCase().contains("windows") ? 'dita.bat' : 'dita';
}

// Requires Synopsys-configured dita:
// 1. git clone https://sig-gitlab.internal.synopsys.com/doc/docs-dita-tools.git
// 2. Add docs-dita-tools/dita-ot/bin to your PATH
task ditasite() {
    dependsOn generateDocs

    doLast {
        ByteArrayOutputStream stdOut = new ByteArrayOutputStream()
        ByteArrayOutputStream stdError = new ByteArrayOutputStream()
        exec {
            commandLine findDita(), '-v', '--input=detect.ditamap', '--format=sig-webhelp', '-o', '../ditasite'
            workingDir "docs/generated"
            standardOutput = stdOut
            errorOutput = stdError
        }
	for (String outputLine: stdError.toString().split('\n')) {
	    if (outputLine.matches(".*File.*file:.*not found.*"))
		throw new Exception("dita error: invalid link: " + outputLine)
	}
	for (String outputLine: stdOut.toString().split('\n')) {
	    if (outputLine.matches(".*\\[DOT.*\\].*\\[ERROR\\].*"))
		throw new Exception("dita error. To run dita by hand: cd docs/generated; dita --input detect.ditamap --format=sig-webhelp --output=../ditasite -v\nERROR: " + outputLine)

	    if (outputLine.matches(".*\\[keyref\\].*\\[DOTJ047I\\].*"))
		throw new Exception("dita found invalid key references. Square brackets around doc text must be escaped if not inside back quotes. To run dita by hand: cd docs/generated; dita --input detect.ditamap --format=sig-webhelp --output=../ditasite -v\nERROR: " + outputLine)
	}
        println "To browse the webhelp: Open docs/ditasite/index.html in a browser"
        //Desktop.desktop.browse file("docs/ditasite/index.html").toURI()
    }
}

task ditasourcezip(type: Zip) {
    // depending on ditasite does some validation of the files going into the dita source zip
    dependsOn ditasite

    archiveName "${project.name}-${version}-ditasource.zip"
    from 'docs/generated'
    destinationDir(file("${buildDir}/libs/"))
}

task publishDitaSource() {
    dependsOn ditasourcezip

    doLast {
        def ditaSourceZipName = "${project.name}-${version}-ditasource.zip"
        def ditaSourceZipLocation = "${buildDir}/libs/${ditaSourceZipName}"
        exec {
            commandLine 'curl', '--insecure', '-u', "${project.ext.artifactoryDeployerUsername}:${project.ext.artifactoryDeployerPassword}", '-X', 'PUT',
                    "${project.ext.deployArtifactoryUrl}/${project.ext.artifactoryRepo}/com/synopsys/integration/${project.name}/${version}/${ditaSourceZipName}", '-T', "${ditaSourceZipLocation}", '-f'
        }
    }
}

task helppdf() {
    dependsOn generateDocs

    doLast {
        exec {
            commandLine 'dita', '--input=detect.ditamap', '--format=sig-pdf', "--outputFile.base=${project.name}-${version}-help", '-o', '../../build/libs'
            workingDir "docs/generated"
        }
    }
}

task helpzip(type: Zip) {
    dependsOn ditasite

    archiveName "${project.name}-${version}-help.zip"
    from 'docs/ditasite'
    destinationDir(file("${buildDir}/libs/"))
}

task docs() {
    dependsOn ditasite
}

task cleanDocs(type: Delete) {
  delete 'docs/generated', 'docs/ditasite'
  followSymlinks = false
}

clean.dependsOn cleanDocs
